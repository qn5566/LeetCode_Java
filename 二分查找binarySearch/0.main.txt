二分查找，也称为折半查找，是一种高效的查找算法，用于在有序数组中查找特定元素的位置。
以下是二分查找的一般性公式：

前提条件：在进行二分查找之前，必须确保数组是有序的（通常是升序排列）。

1. 初始化：首先，确定查找范围的左边界（通常是数组的第一个元素的索引）和右边界（通常是数组的最后一个元素的索引）。
初始化左边界 left 为0，右边界 right 为数组的长度减一。
2. 循环条件：当左边界 left 小于等于右边界 right 时，继续查找。
3. 中间位置：计算中间位置 mid，通常是 (left + right) / 2。也可以使用 (left + (right - left) / 2) 来避免整数溢出。
4. 比较：将要查找的目标值与中间位置 mid 处的元素进行比较。
    如果目标值等于 nums[mid]，则找到了目标，返回 mid。
    如果目标值小于 nums[mid]，则在左半部分继续查找，将 right 更新为 mid - 1。
    如果目标值大于 nums[mid]，则在右半部分继续查找，将 left 更新为 mid + 1。
5. 继续循环：重复步骤 3 和步骤 4 直到找到目标值或者左边界 left 大于右边界 right，此时查找结束。
6. 结果：如果查找成功，在循环结束后返回目标值的索引；如果查找失败，在循环结束后返回一个指示未找到的特殊值（例如 -1）。

二分查找的时间复杂度为 O(log n)，其中 n 是数组的长度。这使得它成为一种非常高效的查找算法，特别适用于大型有序数组。
但要注意，二分查找要求数组是有序的，如果不是有序的，需要先进行排序操作。


"双指针法" 不同于 "二分查找"，它们是两种不同的算法思想和技巧。

1. 双指针法：双指针法是一种常用于数组和链表问题的解决技巧。
它通常包括两个指针，在数组或链表中同时遍历，以解决问题，但它们的移动方式可以不同。
双指针可以用于解决多种问题，如快慢指针、左右指针、滑动窗口等。
在 "11. Container With Most Water" 中的示例就使用了左右指针的双指针法，以在数组中寻找最大的容器面积。

2. 二分查找：二分查找是一种特定的查找算法，通常用于在有序数组中查找特定元素。
它通过将搜索范围逐渐缩小一半来快速定位目标元素。
二分查找包括一个中间指针，将目标元素与中间元素进行比较，然后根据比较结果决定将搜索范围缩小到左半部分或右半部分，以此类推，直到找到目标元素或确定其不存在。

虽然二分查找也涉及两个指针，但它是一种特定的查找算法，不同于通常的双指针技巧，后者通常用于解决更广泛的问题，
如查找特定和满足条件的子数组或子序列，而不仅仅是查找单个元素。

总之，双指针法和二分查找是不同的算法思想，它们在解决不同类型的问题时有不同的应用场景。





