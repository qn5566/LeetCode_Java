package Google經典題目;

/**
 * 解题思路
 * 当我们对数组加一时，我们只需要关注的末尾出现了多少个 99 即可。我们可以考虑如下的三种情况：
 * 如果的末尾没有 99，例如 [1, 2, 3][1,2,3]，那么我们直接将末尾的数加一，得到 [1, 2, 4][1,2,4] 并返回；
 * 如果的末尾有若干个 99，例如 [1, 2, 3, 9, 9][1,2,3,9,9]，那么我们只需要找出从末尾开始的第一个不为 99 的元素，即
 * 33，将该元素加一，得到 [1, 2, 4, 9, 9][1,2,4,9,9]。随后将末尾的 99 全部置零，得到 [1, 2, 4, 0,
 * 0][1,2,4,0,0] 并返回。
 * 如果的所有元素都是 99，例如 [9, 9, 9, 9, 9][9,9,9,9,9]，那么答案为 [1, 0, 0, 0, 0,
 * 0][1,0,0,0,0,0]。我们只需要构造一个长度比多 11 的新数组，将首元素置为 11，其余元素置为 00 即可。
 * 只需要对数组进行一次逆序遍历，找出第一个不为 99 的元素，将其加一并将后续所有元素置零即可。如果中所有的元素均为
 * 99，那么对应着「思路」部分的第三种情况，我们需要返回一个新的数组。
 * 
 * 时间复杂度：O(n)，其中 nn 是数组的长度。
 * 空间复杂度：O(1)。返回值不计入空间复杂度。
 */
class Solution {
    /**
     * @param digits: a number represented as an array of digits
     * @return: the result
     */
    public int[] plusOne(int[] digits) {
        // write your code here
        int n = digits.length;
        for (int i = n - 1; i >= 0; --i) {
            if (digits[i] != 9) {
                ++digits[i];
                for (int j = i + 1; j < n; ++j) {
                    digits[j] = 0;
                }
                return digits;
            }
        }

        // 元素均为 9 的话需要向前进一位
        int[] ans = new int[n + 1];
        ans[0] = 1;
        return ans;
    }
}
