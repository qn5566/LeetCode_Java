/*
給定一個正整數陣列 arr 和一個整數 k，要求找到缺失的第 k 個正整數。
例如，如果 arr = [2,3,4,7,11]，則第 1 個缺失的正整數是 1，第 2 個缺失的正整數是 5，第 3 個缺失的正整數是 6，以此類推。
範例

Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: 缺失的正整數依次為 1，5，6，8，9，第 5 個缺失的正整數是 9。

解法

首先，我們可以考慮最簡單的方法，即遍歷所有正整數，一個一個地判斷它是否在 arr 中，當找到第 k 個缺失的正整數時就返回它。
這種方法的時間複雜度為 O(n^2)，顯然是不可接受的。
考慮使用一個指針 i 遍歷 arr，另一個指針 j 遍歷正整數，當 arr[i] == j 時，將 i 和 j 同時加 1，
否則將 j 加 1。當 j 遍歷到第 k 個缺失的正整數時，返回 j。這種方法的時間複雜度為 O(n)，可以通過本題。
 */
class Solution {
    fun findKthPositive(arr: IntArray, k: Int): Int {
    var i = 0
    var j = 1
    var k = k
    while (i < arr.size && j <= 1000) {
            if (arr[i] == j) {
                i++
            } else {
                k--
                if (k == 0) {
                    return j
                }
            }
            j++
        }
        return arr.last() + k
    }
}

/**
 * 我們使用 i 和 j 兩個指針遍歷 arr 和正整數，當 arr[i] == j 時，將 i 和 j 同時加 1，
 * 否則將 j 加 1。當 j 遍歷到第 k 個缺失的正整數時，返回 j。如果正整數遍歷完仍未找到第 k 個缺失的正整數，則
 */