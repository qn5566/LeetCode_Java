package DP.兩組字串;

/**
 * 
 * 这道题只给了我们两个按键，如果只能选择两个按键，那么博主一定会要复制和粘贴，
 * 此二键在手，天下我有！！！果然，这道题就是给了复制和粘贴这两个按键，然后给了一个A，
 * 目标时利用这两个键来打印出n个A，注意复制的时候时全部复制，不能选择部分来复制，然后复制和粘贴都算操作步骤，
 * 问打印出n个A需要多少步操作。对于这种有明显的递推特征的题，要有隐约的感觉，一定要尝试递归和
 * DP。递归解法一般接近于暴力搜索，但是有时候是可以优化的，从而能够通过 OJ。而一旦递归不行的话，那么一般来说 DP
 * 这个大杀器都能解的。还有一点，对于这种题，找规律最重要，DP
 * 要找出状态转移方程，而如果无法发现内在的联系，那么状态转移方程就比较难写出来了。所以，从简单的例子开始分析，试图找规律：
 * 
 * 当n = 1时，已经有一个A了，不需要其他操作，返回0
 * 
 * 当n = 2时，需要复制一次，粘贴一次，返回2
 * 
 * 当n = 3时，需要复制一次，粘贴两次，返回3
 * 
 * 当n = 4时，这就有两种做法，一种是需要复制一次，粘贴三次，共4步，另一种是先复制一次，粘贴一次，得到 AA，然后再复制一次，粘贴一次，得到
 * AAAA，两种方法都是返回4
 * 
 * 当n = 5时，需要复制一次，粘贴四次，返回5
 * 
 * 当n = 6时，需要复制一次，粘贴两次，得到 AAA，再复制一次，粘贴一次，得到 AAAAAA，共5步，返回5
 * 
 * 通过分析上面这6个简单的例子，已经可以总结出一些规律了，首先对于任意一个n(除了1以外)，
 * 最差的情况就是用n步，不会再多于n步，但是有可能是会小于n步的，比如
 * n=6 时，就只用了5步，仔细分析一下，发现时先拼成了 AAA，再复制粘贴成了
 * AAAAAA。那么什么情况下可以利用这种方法来减少步骤呢，分析发现，小模块的长度必须要能整除n，
 * 这样才能拆分。对于 n=6，我们其实还可先拼出
 * AA，然后再复制一次，粘贴两次，得到的还是5。分析到这里，解题的思路应该比较清晰了，
 * 找出n的所有因子，然后这个因子可以当作模块的个数，再算出模块的长度
 * n/i，调用递归，加上模块的个数i来更新结果 res 即可，参见代码如下：
 * 
 * DP 解法
 * 
 * t O(n - 2 * m - 2)
 * s O(n+1)
 */
class Solution_new {
    /**
     * 因為一定會小於n的一半
     * 所以只需要尋找n的開根號的次數
     * 
     * dp[i] = dp[j] + dp[i / j];
     * int h = (int) Math.sqrt(n);
     * 
     * t O(n - 2 * sqrt(n))
     * s O(n+1)
     */

    public int minSteps(int n) {
        int[] dp = new int[n + 1];
        int h = (int) Math.sqrt(n);
        for (int i = 2; i <= n; i++) {
            dp[i] = i;
            for (int j = 2; j <= h; j++) {
                if (i % j == 0) {
                    dp[i] = dp[j] + dp[i / j];
                    break;
                }
            }
        }
        return dp[n];
    }
}

class Solution {
    public int minSteps(int n) {
        int[] dp = new int[n + 1];

        for (int i = 2; i <= n; i++) {
            dp[i] = i;

            for (int j = i - 1; j > 1; j--) {
                if (i % j == 0) {
                    dp[i] = dp[j] + dp[i / j];
                    break;
                }
            }
        }
        return dp[n];
    }
}

/**
 * 使用遞歸
 */
class Solution_recursion {
    public int minSteps(int n) {
        if (n == 1)
            return 0;
        int res = n;
        for (int i = n - 1; i > 1; --i) {
            if (n % i == 0) {
                res = Math.min(res, minSteps(n / i) + i);
            }
        }
        return res;
    }
}
